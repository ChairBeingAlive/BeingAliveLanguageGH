using Grasshopper.Kernel;
using System;
using Rhino.Geometry;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Grasshopper.Kernel.Types;

namespace BeingAliveLanguage
{
  /// <summary>
  /// Base class to derive all organ components with similar procedure.
  /// </summary>
  public class BALorganBase : GH_Component
  {
    public BALorganBase(string name, string nickname, string description, string category, string subcategory)
      : base(name, nickname, description, "BAL", "04::organ")
    {
    }

    protected override System.Drawing.Bitmap Icon => Properties.Resources.balTree3D;
    public override Guid ComponentGuid => new Guid("b1a34eee-cb0f-4607-bf9f-037d65113be0");
    public override GH_Exposure Exposure => GH_Exposure.hidden;

    // variables
    protected int mNum;
    protected int mPhase;
    protected double mScale;
    protected bool mSym;
    protected bool mActive;
    protected Plane mPln;

    protected override void RegisterInputParams(GH_InputParamManager pManager)
    {
      pManager.AddPlaneParameter("Plane", "pln", "Base plane to draw the organ.", GH_ParamAccess.item);
      pManager.AddIntegerParameter("Base Number", "num", "Number of the organ in the initial phase.", GH_ParamAccess.item, 3);
      pManager.AddIntegerParameter("Phase", "phase", "Phase of the organ.", GH_ParamAccess.item, 1);
      pManager.AddNumberParameter("Scale", "s", "Scale of the organ.", GH_ParamAccess.item, 1.0);
      pManager.AddBooleanParameter("Symmetric", "sym", "Symmetric or not.", GH_ParamAccess.item, true);
    }

    protected override void RegisterOutputParams(GH_OutputParamManager pManager)
    {
      pManager.AddTextParameter("State", "state", "State of the organ (active or inactive).", GH_ParamAccess.item);
      pManager.AddCurveParameter("ExistingOrgan", "exiOrg", "Existing organs from current or previous years.", GH_ParamAccess.list);
      pManager.AddCurveParameter("NewOrgan", "newOrg", "New organs from the current year.", GH_ParamAccess.list);
      pManager.AddCurveParameter("ExistingGrassyPart", "exiGrass", "Existing grassy part of the organ.", GH_ParamAccess.list);
      pManager.AddCurveParameter("NewGrassyPart", "newGrass", "Newly grown grassy part of the organ.", GH_ParamAccess.list);
    }

    protected override void SolveInstance(IGH_DataAccess DA)
    {
      // initialize with different values
      mNum = 3;
      mPhase = 1;
      mScale = 1.0;
      mSym = true;
      mPln = new Plane();

      if (!DA.GetData("Plane", ref mPln))
      { return; }
      if (!DA.GetData("Base Number", ref mNum))
      { return; }
      if (!DA.GetData("Phase", ref mPhase))
      { return; }
      if (!DA.GetData("Scale", ref mScale))
      { return; }
      if (!DA.GetData("Symmetric", ref mSym))
      { return; }

      // compute current states
      mActive = mPhase % 2 == 0;
      DA.SetData("State", mActive ? "active" : "inactive");
    }
  }

  public class BALorganTuft : BALorganBase
  {
    public BALorganTuft()
      : base("Organ_Tuft", "balOrganTuft", "Organ of resistance -- 'tuft'.", "BAL", "04::organ")
    {
    }

    protected override System.Drawing.Bitmap Icon => Properties.Resources.balTree3D;
    public override Guid ComponentGuid => new Guid("a7fdb09e-39e7-4ceb-a78f-b2b2ab71f572");
    public override GH_Exposure Exposure => GH_Exposure.primary;

    protected override void SolveInstance(IGH_DataAccess DA)
    {
      base.SolveInstance(DA);

      var horizontalScale = 0.5;
      var circle = new Circle(mPln, 1.0);
      var horizontalSpacing = horizontalScale * mScale * 2; // radius = 1, D = 2

      var xform = Transform.Scale(mPln, horizontalScale * mScale, 1 * mScale, 1 * mScale);
      var geo = circle.ToNurbsCurve();
      geo.Transform(xform);

      var geoCol = new List<NurbsCurve>() { geo };
      var exiOrganLst = new List<NurbsCurve>();
      var newOrganLst = new List<NurbsCurve>();

      if (mSym)
      {
        if (mNum % 2 == 0)
        {
          AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "When `sym==TRUE`, even count will be rounded to the nearest odd number.");

        }

        // Core Organ part
        for (int i = 0; i < mNum / 2; i++)
        {
          var newGeo = geo.Duplicate() as NurbsCurve;
          if (newGeo == null)
          {
            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Internal NURBS casting error.");
          }
          newGeo.Translate(horizontalSpacing * (i + 1), 0, 0);
          geoCol.Add(newGeo);

          var newGeoMirror = geo.Duplicate() as NurbsCurve;
          newGeoMirror.Translate(-horizontalSpacing * (i + 1), 0, 0);
          geoCol.Add(newGeoMirror);
        }

        if (mActive)
        {
          exiOrganLst = geoCol.GetRange(0, geoCol.Count - 2);
          newOrganLst = geoCol.GetRange(geoCol.Count - 2, 2);
        }
        else
        {
          exiOrganLst = geoCol;
        }

        // Grassy part


      }
      else
      {
        for (int i = 0; i < mNum; i++)
        {
          var newGeo = geo.Duplicate() as NurbsCurve;
          if (newGeo == null)
          {
            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Internal NURBS casting error.");
          }
          newGeo.Translate(horizontalSpacing * i, 0, 0);
          geoCol.Add(newGeo);
        }

        // no symmetry, only take 1 element as "new"
        exiOrganLst = geoCol.GetRange(0, geoCol.Count - 1);
        newOrganLst = geoCol.GetRange(geoCol.Count - 1, 1);
      }

      DA.SetDataList("NewOrgan", geoCol);

    }
  }
}
