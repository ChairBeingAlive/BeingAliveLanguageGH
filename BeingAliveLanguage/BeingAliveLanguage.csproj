<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<!-- Select the framework(s) you wish to target.
        Rhino 6: net45
        Rhino 7: net48
        Rhino 8 Windows: net48, net7.0, net7.0-windows, net7.0-windows10.0.22000.0, etc
        Rhino 8 Mac: net7.0, net7.0-macos, net7.0-macos12.0, etc
    -->
		<TargetFrameworks>net7.0;net48</TargetFrameworks>
		<EnableDynamicLoading>true</EnableDynamicLoading>
		<TargetExt>.gha</TargetExt>
		<NoWarn>NU1701;NETSDK1086</NoWarn>
		<EnableWindowsTargeting>true</EnableWindowsTargeting>
	</PropertyGroup>

	<PropertyGroup>
		<!-- Specifies information for Assembly and Yak -->
		<Version>1.0</Version>
		<Title>BeingAliveLanguage</Title>
		<Description>A GH plugin for drawing ecological systems.</Description>
		<TargetExt>.gha</TargetExt>
		<Company>ETH Zurich</Company>
		<Authors>Dr. Zhao MA</Authors>
		<BaseOutputPath>bin\$(Configuration)\</BaseOutputPath>
		<AutoGenerateBindingRedirects>False</AutoGenerateBindingRedirects>
		<IsPublishable>False</IsPublishable>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Grasshopper" Version="7.0.20314.3001" Condition="$(TargetFramework) == 'net48'" ExcludeAssets="runtime" />
		<PackageReference Include="Grasshopper" Version="8.0.23304.9001" Condition="'$(TargetFramework)' == 'net7.0-windows' or '$(TargetFramework)' == 'net7.0'" ExcludeAssets="runtime" />
		<PackageReference Include="Clipper2" Version="1.4.0" />
		<PackageReference Include="KdTree" Version="1.4.1" />
		<PackageReference Include="MathNet.Numerics" Version="5.0.0" />
		<PackageReference Include="MIConvexHull" Version="1.1.19.1019" />
		<PackageReference Include="System.Resources.Extensions" Version="7.0.0" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\BeingAliveLanguageRhinoCommon\BeingAliveLanguageRC.csproj" />
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Properties\Resources.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resources.resx</DependentUpon>
		</Compile>
		<Compile Update="Properties\Settings.Designer.cs">
		  <DesignTimeSharedInput>True</DesignTimeSharedInput>
		  <AutoGen>True</AutoGen>
		  <DependentUpon>Settings.settings</DependentUpon>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Update="Properties\Resources.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resources.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>

	<ItemGroup>
		<None Update="Properties\Settings.settings">
			<Generator>SettingsSingleFileGenerator</Generator>
			<LastGenOutput>Settings.Designer.cs</LastGenOutput>
		</None>
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<PlatformTarget>x64</PlatformTarget>
		<OutputPath>bin\</OutputPath>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<PlatformTarget>x64</PlatformTarget>
	</PropertyGroup>


	<!-- For Windows only builds -->
	<PropertyGroup Condition="$(TargetFramework.Contains('-windows')) or $(TargetFramework.StartsWith('net48'))">
		<UseWindowsForms>true</UseWindowsForms>
	</PropertyGroup>

	<!-- Reference WinForms for .NET 7.0 on macOS -->
	<ItemGroup Condition="!($(TargetFramework.Contains('-windows')) or $(TargetFramework.StartsWith('net48')))">
		<!-- Rhino 8.11 and later you can use this -->
		<!-- <FrameworkReference Include="Microsoft.WindowsDesktop.App.WindowsForms" /> -->

		<!-- Rhino 8.10 and earlier -->
		<PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies.net48" Version="1.0.3" ExcludeAssets="all" GeneratePathProperty="true" />
		<Reference Include="$(PkgMicrosoft_NETFramework_ReferenceAssemblies_net48)\build\.NETFramework\v4.8\System.Windows.Forms.dll" Private="False" />
		<PackageReference Include="System.Drawing.Common" Version="7.0.0" ExcludeAssets="runtime" />
	</ItemGroup>

	<Target Name="CopyPdbForMonoDebugging" AfterTargets="AfterBuild">
		<!-- Enable debugging in Rhino 6/7 on Mac -->
		<Copy SourceFiles="$(TargetDir)$(TargetName).pdb" DestinationFiles="$(TargetDir)$(TargetName).gha.pdb" Condition="$([MSBuild]::IsOSPlatform(OSX)) and $(TargetFramework.StartsWith('net48')) and Exists('$(TargetDir)$(TargetName).pdb')" />
	</Target>

	<Target Name="BuildYakPackage" AfterTargets="DispatchToInnerBuilds">
		<PropertyGroup>
			<YakExecutable Condition="$(YakExecutable) == '' and $([MSBuild]::IsOSPlatform(windows)) and Exists('C:\Program Files\Rhino 8\System\Yak.exe')">C:\Program Files\Rhino 8\System\Yak.exe</YakExecutable>
			<YakExecutable Condition="$(YakExecutable) == '' and $([MSBuild]::IsOSPlatform(macos)) and Exists('/Applications/Rhino 8.app/Contents/Resources/bin/yak')">/Applications/Rhino 8.app/Contents/Resources/bin/yak</YakExecutable>

			<BuildYakPackage Condition="$(BuildYakPackage) == '' and $(YakExecutable) != '' and Exists($(YakExecutable))">True</BuildYakPackage>
		</PropertyGroup>

		<Warning Text="Could not find Yak executable" Condition="$(YakExecutable) == ''" />

		<ItemGroup>
			<YakPackagesToDelete Include="$(OutputPath)\*.yak;$(OutputPath)\**\manifest.yml" />
		</ItemGroup>

		<Delete Files="@(YakPackagesToDelete)" />

		<Exec Command="&quot;$(YakExecutable)&quot; spec" WorkingDirectory="$(OutputPath)" Condition="$(BuildYakPackage) == 'True'" />
		<Exec Command="&quot;$(YakExecutable)&quot; build" WorkingDirectory="$(OutputPath)" Condition="$(BuildYakPackage) == 'True'" />

		<!-- Rhino 7 -->
		<Exec Command="&quot;$(YakExecutable)&quot; spec" WorkingDirectory="$(OutputPath)net48\" Condition="$(BuildYakPackage) == 'True'" />
		<Exec Command="&quot;$(YakExecutable)&quot; build" WorkingDirectory="$(OutputPath)net48\" Condition="$(BuildYakPackage) == 'True'" />

		<ItemGroup>
			<YakPackageToMove Include="$(BaseOutputPath)$(Configuration)\net48\*.yak" />
		</ItemGroup>
		<Move SourceFiles="@(YakPackageToMove)" DestinationFolder="$(BaseOutputPath)$(Configuration)\" Condition="$(BuildYakPackage) == 'True'" />
	</Target>

	<Target Name="PostBuild" AfterTargets="PostBuildEvent">
		<Exec Command="if not exist &quot;$(SolutionDir)bin&quot; mkdir &quot;$(SolutionDir)bin&quot;&#xD;&#xA;Copy /y &quot;$(TargetPath)&quot; &quot;$(SolutionDir)bin\$(ProjectName).gha&quot;&#xD;&#xA;Copy /y &quot;$(TargetDir)\*.dll&quot; &quot;$(SolutionDir)bin\*.dll&quot;" />
	</Target>

</Project>